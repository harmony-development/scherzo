name: Rust

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - '**/*.nix'
      - 'nix/envrc'
      - 'flake.lock'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - '**/*.nix'
      - 'nix/envrc'
      - 'flake.lock'

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short

jobs:
  check:
    runs-on: ubuntu-latest
    name: Build scherzo
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install nix
      uses: cachix/install-nix-action@v18
      with:
        extra_nix_config: |
          experimental-features = nix-command flakes
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Install dependencies
      run: |
        sudo apt update -yy
        sudo apt install -yy --no-install-recommends protobuf-compiler clang

    - name: Install rust
      run: rustup update && rustup component add rustfmt clippy

    - name: Cache rust
      uses: Swatinem/rust-cache@v1
      with:
        key: cache-debug

    - name: Install Cargo Deny
      run: cargo install --locked cargo-deny

    - name: Cargo Deny
      run: cargo deny check

    - name: Test (with sled DB)
      run: nix-shell -p mold --run "cargo test --no-default-features --features sled,voice"

    - name: Test (with sqlite DB)
      run: nix-shell -p mold --run "cargo test --no-default-features --features sqlite,voice"
  
  build-release:
    needs: check
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Build release binaries
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install nix
      uses: cachix/install-nix-action@v18
      with:
        extra_nix_config: |
          experimental-features = nix-command flakes
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Install dependencies
      run: |
        sudo apt update -yy
        sudo apt install -yy --no-install-recommends protobuf-compiler clang

    - name: Install rust
      run: rustup update && rustup component add rustfmt clippy

    - name: Cache rust
      uses: Swatinem/rust-cache@v1
      with:
        key: cache-release-1

    - name: Build release
      run: nix-shell -p mold --run "cargo build --release --no-default-features --features sled,voice,jemalloc"

    - name: Build release (migrate binary)
      run: nix-shell -p mold --run "cargo build --release --no-default-features --features sled,sqlite,jemalloc --bin scherzo_migrate"

    #- name: UPX
    #  run: |
    #      ./upx target/x86_64-unknown-linux-gnu/release/scherzo
    #      ./upx target/x86_64-unknown-linux-gnu/release/scherzo_cmd
    
    - name: Upload release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
          chmod +x pyuploadtool-x86_64.AppImage
          ./pyuploadtool-x86_64.AppImage target/release/scherzo target/release/scherzo_cmd target/release/scherzo_migrate

  update:
    needs: build-release
    name: Update Scherzo at harmonyapp.io
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: 'harmony-development/ansible'
      - run: 'echo "$SSH_KEY" > key && chmod 600 key'
        shell: bash
        env:
          SSH_KEY: ${{secrets.ACTIONS_SSH_KEY}}
      - run: 'echo "$KNOWN_HOSTS" > known_hosts && chmod 600 known_hosts'
        shell: bash
        env:
          KNOWN_HOSTS: ${{secrets.ACTIONS_SSH_KNOWN_HOSTS}}
      - run: 'ansible-playbook only-scherzo.yml --key-file key'
        shell: bash
        env:
          SSH_HOST: ${{secrets.ACTIONS_SSH_HOST}}
      - name: Trigger integration testing
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.INTEGRATION_TEST_PAT }}
          repository: harmony-development/integration-testing
          event-type: dep-updated

  docker:
    needs: build-release
    name: Update scherzo docker image
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: yusdacra/scherzo:latest
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
